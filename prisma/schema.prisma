datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// user model for campsite website
model User {
  id            String    @id @unique @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  dateOfBirth   DateTime?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  reviews       Review[]
}

model Campsite {
  id               String    @id @unique @default(cuid())
  name             String
  slug             String?   @unique
  updatedAt        DateTime  @updatedAt
  longDescription  String?
  shortDescription String?
  rules            String?
  cancellation     String?
  // location information
  location         String?
  latitude         Float?
  longitude        Float?
  directions       String?
  streetAddress    String?
  city             String?
  state            String?
  zip              String?
  // images
  mainImage        String?
  image2           String?
  image3           String?
  mapImage         String?
  images           String[]
  // stats
  capacity         Int?
  pets             Boolean?
  price            Int?
  open             Boolean?
  // amenities
  firePit          Boolean?
  picnicTable      Boolean?
  primitive        Boolean?
  potableWater     Boolean?
  toilets          Boolean?
  // relationships
  bookings         Booking[]
  reviews          Review[]
  addons           Addon[]
}

model Addon {
  id       String    @id @unique @default(cuid())
  name     String
  price    Int
  campsite Campsite  @relation(fields: [campId], references: [id])
  campId   String
  bookings Booking[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  rating    Int      @default(5)
  campsite  Campsite @relation(fields: [campId], references: [id])
  campId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Booking {
  id             String   @id @unique @default(cuid())
  campsite       Campsite @relation(fields: [campsiteId], references: [id])
  campsiteId     String
  userId         String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User     @relation(fields: [userId], references: [id])
  status         String   @default("pending")
  numberOfNights Int
  numberOfGuests Int
  adults         Int
  children       Int
  pets           Int
  addons         Addon[]
  addonIds       String[]
  totalCost      Float
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
