datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
  // shadowDatabaseUrl = env("SHADOW_DATABASE_URL") Only needed when using a cloud provider that doesn't support the creation of new databases, like Heroku. Learn more: https://pris.ly/d/migrate-shadow
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(uuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(uuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

// user model for campsite website
model User {
  id            String    @id @unique @default(uuid())
  createdAt     DateTime  @default(now())
  updatedAt     DateTime? @updatedAt
  firstName     String?
  lastName      String?
  streetAddress String?
  city          String?
  state         String?
  zip           String?
  email         String?   @unique
  emailVerified DateTime?
  dateOfBirth   DateTime?
  role          String?   @default("user")
  accounts      Account[]
  sessions      Session[]
  bookings      Booking[]
  reviews       Review[]
}

model Campsite {
  id               String    @id @unique @default(uuid())
  name             String
  subtitle         String?   @default("")
  slug             String?   @unique
  updatedAt        DateTime  @updatedAt
  longDescription  String?   @default("")
  shortDescription String?   @default("")
  rules            String?   @default("")
  cancellation     String?   @default("")
  // location information
  location         String?   @default("")
  latitude         Float?    @default(0)
  longitude        Float?    @default(0)
  directions       String?   @default("")
  streetAddress    String?   @default("")
  city             String?   @default("")
  state            String?   @default("")
  zip              String?   @default("")
  // images
  mainImage        String?   @default("")
  image2           String?   @default("")
  image3           String?   @default("")
  mapImage         String?   @default("")
  images           String[]
  // stats
  capacity         Int?      @default(2)
  pets             Boolean?  @default(false)
  price            Int?      @default(20)
  open             Boolean?  @default(false)
  // amenities
  firePit          Boolean?  @default(false)
  picnicTable      Boolean?  @default(false)
  primitive        Boolean?  @default(false)
  potableWater     Boolean?  @default(false)
  toilets          Boolean?  @default(false)
  electricity      Boolean?  @default(false)
  // relationships
  bookings         Booking[]
  reviews          Review[]
  addons           Addon[]
}

model Addon {
  id       String    @id @unique @default(uuid())
  name     String
  price    Int
  campsite Campsite  @relation(fields: [campId], references: [id])
  campId   String
  bookings Booking[]
}

model Review {
  id        Int      @id @default(autoincrement())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  title     String   @db.VarChar(255)
  content   String?
  rating    Int      @default(5)
  campsite  Campsite @relation(fields: [campId], references: [id])
  campId    String
  author    User     @relation(fields: [authorId], references: [id])
  authorId  String
}

model Booking {
  id             String   @id @unique @default(uuid())
  campsite       Campsite @relation(fields: [campsiteId], references: [id])
  campsiteId     String
  userId         String
  startDate      DateTime
  endDate        DateTime
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  User           User     @relation(fields: [userId], references: [id])
  status         String   @default("pending")
  numberOfNights Int
  numberOfGuests Int
  adults         Int?
  children       Int?
  pets           Int?
  addons         Addon[]
  addonIds       String[]
  totalCost      Float
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
